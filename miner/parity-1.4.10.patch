
diff --git a/ethcore/src/miner/bitether.rs b/ethcore/src/miner/bitether.rs
new file mode 100644
index 0000000..13f4b8d
--- /dev/null
+++ b/ethcore/src/miner/bitether.rs
@@ -0,0 +1,178 @@
+use util::*;
+use account_provider::AccountProvider;
+use client::{MiningBlockChainClient};
+use block::{IsBlock, OpenBlock};
+use transaction::{Action, SignedTransaction, Transaction};
+use miner::banning_queue::{BanningTransactionQueue};
+use std::vec::Vec;
+use std::thread;
+
+#[derive(Clone)]
+pub struct BitEtherOptions {
+    tx: Arc<Mutex<Option<SignedTransaction>>>,
+    transaction_queue: Arc<Mutex<BanningTransactionQueue>>,
+    accounts: Arc<AccountProvider>,
+    address: Address
+}
+
+pub enum BitEtherError {
+    SignError
+}
+
+impl fmt::Display for BitEtherError {
+    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {
+        match *self {
+            BitEtherError::SignError => write!(f, "Sign failed"),
+        }
+    }
+}
+
+impl fmt::Debug for BitEtherError {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        match *self {
+            BitEtherError::SignError => write!(f, "Sign failed"),
+        }
+    }
+}
+
+struct CachedTransaction {
+    tx: SignedTransaction,
+    nonce: U256
+}
+
+pub struct BitEtherMiner {
+    options: Arc<Option<BitEtherOptions>>,
+    cache: Arc<Mutex<Vec<CachedTransaction>>>
+}
+
+
+impl BitEtherMiner {
+
+    pub fn new(tq: Arc<Mutex<BanningTransactionQueue>>, accounts_opt: &Option<Arc<AccountProvider>>, claim_addr_opt: Option<Address>) -> BitEtherMiner {
+        let accounts = match *accounts_opt {
+            Some(ref val) => val.clone(),
+            None => return BitEtherMiner {
+                options: Arc::new(None),
+                cache: Arc::new(Mutex::new(Vec::new()))
+            }
+        };
+        let claim_addr = match claim_addr_opt {
+            Some(val) => val,
+            None => return BitEtherMiner {
+                options: Arc::new(None),
+                cache: Arc::new(Mutex::new(Vec::new()))
+            }
+        };
+        BitEtherMiner {
+            options: Arc::new(Some(
+                BitEtherOptions {
+                    tx: Arc::new(Mutex::new(None)),
+                    transaction_queue: tq,
+                    accounts: accounts,
+                    address: claim_addr
+                }
+            )),
+            cache: Arc::new(Mutex::new(Vec::with_capacity(7)))
+        }
+    }
+
+    pub fn init(&self, chain: &MiningBlockChainClient) {
+        info!(target: "bitether", "Prepare initial transactions");
+        match *self.options {
+            Some(ref options) => {
+                let nonce = chain.latest_nonce(&options.address);
+                self.make_cache(nonce);
+                self.make_cache(nonce + U256::one());
+                self.make_cache(nonce + U256::one() + U256::one());
+            },
+            None => {
+                warn!(target: "bitether", "Skip BitEther initialization");
+            }
+        }
+    }
+
+    pub fn add_tx(&self, chain: &MiningBlockChainClient, open_block: &mut OpenBlock) {
+        match *self.options {
+            Some(ref options) => {
+                let nonce = chain.latest_nonce(&options.address);
+                match self.get_cached(nonce) {
+                    Some(bec_tx) => match open_block.push_transaction(bec_tx.clone(), None) {
+                        Err(e) => warn!(target: "bitether", "Error adding BitEther Coin transaction to block: Error: {:?}", e),
+                        _ => info!(target: "bitether", "Added BitEther Coin transaction #{} to block {:?}", nonce, open_block.header().number())
+                    },
+                    None => {
+                        warn!(target: "bitether", "BitEther Coin transaction is not ready for nonce {:?}", nonce);
+                        self.make_cache(nonce);
+                    }
+                }
+                self.remove_from_cache(nonce - U256::one());
+                self.make_cache(nonce + U256::one());
+                self.make_cache(nonce + U256::one() + U256::one());
+                self.make_cache(nonce + U256::one() + U256::one() + U256::one());
+            },
+            None => info!(target: "bitether", "Skip BitEther Coin claim call")
+        }
+    }
+
+    fn get_cached(&self, nonce: U256) -> Option<SignedTransaction> {
+        let cache = self.cache.clone();
+        let cache_mutex = cache.lock();
+        let same_nonce = |x: &&CachedTransaction| x.nonce == nonce;
+        cache_mutex.iter()
+            .find(same_nonce)
+            .map(|v| v.tx.clone())
+    }
+
+    fn make_cache(&self, nonce: U256) {
+        if !self.is_cached(nonce) {
+            let cache = self.cache.clone();
+            let options = self.options.clone();
+            let nonce_copy = nonce.clone();
+            thread::spawn(move || {
+                let mut cache_mutex = cache.lock();
+                match *options {
+                    Some(ref o) => {
+                        let tx = BitEtherMiner::create_tx(o, nonce_copy).unwrap();